import sqlite3

from pygments import highlight
from pygments.formatters.html import HtmlFormatter
from pygments.lexers.jvm import JavaLexer


class JavaProcessor(object):
    def processEasyProblems(self, solutionsDir, descriptionsDir):

        entries = []
        entries.append(('1', 'Two Sum', 'Easy', 'twoSum', '0, 1', '', ''))
        entries.append(('2', 'Add Two Numbers', 'Medium', 'addTwoNumbers', '2, 3', '', ''))
        entries.append(('3', 'Longest Substring Without Repeating Characters', 'Medium', 'longestSubstringWithoutRepeatingCharacters', '1, 4, 5', '', ''))
        entries.append(('4', 'Median of Two Sorted Arrays', 'Hard', 'medianofTwoSortedArrays', '0, 6, 7', '', '0'))
        entries.append(('5', 'Longest Palindromic Substring', 'Medium', 'longestPalindromicSubstring', '5', '', ''))
        entries.append(('6', 'ZigZag Conversion', 'Medium', 'zigZagConversion', '5', '', ''))
        entries.append(('7', 'Reverse Integer', 'Easy', 'reverseInteger', '3', '', ''))
        entries.append(('8', 'String to Integer (atoi)', 'Medium', 'stringtoInteger', '3, 5', '', ''))
        entries.append(('9', 'Palindrome Number', 'Easy', 'palindromeNumber', '3', '0', ''))
        entries.append(('10', 'Regular Expression Matching', 'Hard', 'regularExpressionMatching', '5, 8, 9', '', '0'))
        entries.append(('11', 'Container With Most Water', 'Medium', 'containerWithMostWater', '0, 4', '', ''))
        entries.append(('12', 'Integer to Roman', 'Medium', 'integertoRoman', '3, 5', '', '2'))
        entries.append(('13', 'Roman to Integer', 'Easy', 'romantoInteger', '3, 5', '', '2'))
        entries.append(('14', 'Longest Common Prefix', 'Easy', 'longestCommonPrefix', '5', '', ''))
        entries.append(('15', '3Sum', 'Medium', '3Sum', '0, 4', '0', ''))
        entries.append(('16', '3Sum Closest', 'Medium', '3SumClosest', '0, 4', '', ''))
        entries.append(('17', 'Letter Combinations of a Phone Number', 'Medium', 'letterCombinationsofaPhoneNumber', '5, 8', '0', '2'))
        entries.append(('18', '4Sum', 'Medium', '4Sum', '0, 1, 4', '', ''))
        entries.append(('19', 'Remove Nth Node From End of List', 'Medium', 'removeNthNodeFromEndofList', '2, 4', '', ''))
        entries.append(('20', 'Valid Parentheses', 'Easy', 'validParentheses', '5, 15', '', ''))
        entries.append(('21', 'Merge Two Sorted Lists', 'Easy', 'mergeTwoSortedLists', '2', '0', '2'))
        entries.append(('22', 'Generate Parentheses', 'Medium', 'generateParentheses', '5, 8', '', ''))
        entries.append(('23', 'Merge k Sorted Lists', 'Hard', 'mergekSortedLists', '2, 7, 20', '', ''))
        entries.append(('24', 'Swap Nodes in Pairs', 'Medium', 'swapNodesinPairs', '2', '', ''))
        entries.append(('25', 'Reverse Nodes in k-Group', 'Hard', 'reverseNodesinkGroup', '2', '', '0'))
        entries.append(('26', 'Remove Duplicates from Sorted Array', 'Easy', 'removeDuplicatesfromSortedArray', '0, 4', '', ''))
        entries.append(('27', 'Remove Element', 'Easy', 'removeElement', '0, 4', '', ''))
        entries.append(('28', 'Implement strStr()', 'Easy', 'implementstrStr', '4, 5', '', '0'))
        entries.append(('29', 'Divide Two Integers', 'Medium', 'divideTwoIntegers', '3, 6', '', ''))
        entries.append(('30', 'Substring with Concatenation of All Words', 'Hard', 'substringwithConcatenationofAllWords', '1, 4, 5', '', ''))
        entries.append(('31', 'Next Permutation', 'Medium', 'nextPermutation', '0', '0', ''))
        entries.append(('32', 'Longest Valid Parentheses', 'Hard', 'longestValidParentheses', '5, 9', '', '0'))
        entries.append(('33', 'Search in Rotated Sorted Array', 'Medium', 'searchinRotatedSortedArray', '0, 6', '', ''))
        entries.append(('34', 'Search for a Range', 'Medium', 'searchforaRange', '0, 6', '0', ''))
        entries.append(('35', 'Search Insert Position', 'Easy', 'searchInsertPosition', '0, 6', '', ''))
        entries.append(('36', 'Valid Sudoku', 'Medium', 'validSudoku', '1, 8', '', ''))
        entries.append(('37', 'Sudoku Solver', 'Hard', 'sudokuSolver', '1, 8', '', '0'))
        entries.append(('38', 'Count and Say', 'Easy', 'countandSay', '5', '', ''))
        entries.append(('39', 'Combination Sum', 'Medium', 'combinationSum', '0, 8', '0', ''))
        entries.append(('40', 'Combination Sum II', 'Medium', 'combinationSumII', '0, 8', '', ''))
        entries.append(('41', 'First Missing Positive', 'Hard', 'firstMissingPositive', '0', '', ''))
        entries.append(('42', 'Trapping Rain Water', 'Hard', 'trappingRainWater', '0, 4 ,15', '', '0'))
        entries.append(('43', 'Multiply Strings', 'Medium', 'multiplyStrings', '3, 5', '', ''))
        entries.append(('44', 'Wildcard Matching', 'Hard', 'wildcardMatching', '5, 8, 9, 17', '', '0'))
        entries.append(('45', 'Jump Game II', 'Hard', 'jumpGameII', '0, 17', '', '0'))
        entries.append(('46', 'Permutations', 'Medium', 'permutations', '8', '', ''))
        entries.append(('47', 'Permutations II', 'Medium', 'permutationsII', '8', '', '0'))
        entries.append(('48', 'Rotate Image', 'Medium', 'rotateImage', '0', '', ''))
        entries.append(('49', 'Group Anagrams', 'Medium', 'groupAnagrams', '1, 5', '', ''))
        entries.append(('50', 'Pow(x, n)', 'Medium', 'powxn', '3, 6', '', ''))
        entries.append(('51', 'N-Queens', 'Hard', 'NQueens', '8', '', '0'))
        entries.append(('52', 'N-Queens II', 'Hard', 'NQueensII', '8', '', ''))
        entries.append(('53', 'Maximum Subarray', 'Easy', 'maximumSubarray', '0, 8, 9', '', ''))
        entries.append(('54', 'Spiral Matrix', 'Medium', 'spiralMatrix', '0', '', ''))
        entries.append(('55', 'Jump Game', 'Medium', 'jumpGame', '0, 17', '', ''))
        entries.append(('56', 'Merge Intervals', 'Medium', 'mergeIntervals', '0, 13', '', ''))
        entries.append(('57', 'Insert Interval', 'Hard', 'insertInterval', '0, 13', '', ''))
        entries.append(('58', 'Length of Last Word', 'Easy', 'lengthofLastWord', '5', '', ''))
        entries.append(('59', 'Spiral Matrix II', 'Medium', 'spiralMatrixII', '0', '', ''))
        entries.append(('60', 'Permutation Sequence', 'Medium', 'permutationSequence', '3, 8', '', '0'))
        entries.append(('61', 'Rotate List', 'Medium', 'rotateList', '2, 4', '', ''))
        entries.append(('62', 'Unique Paths', 'Medium', 'uniquePaths', '0, 9', '0', ''))
        entries.append(('63', 'Unique Paths II', 'Medium', 'uniquePathsII', '0, 9', '0', ''))
        entries.append(('64', 'Minimum Path Sum', 'Medium', 'minimumPathSum', '0, 9', '', ''))
        entries.append(('65', 'Valid Number', 'Hard', 'validNumber', '3, 5', '', '0'))
        entries.append(('66', 'Plus One', 'Easy', 'plusOne', '0, 3', '', ''))
        entries.append(('67', 'Add Binary', 'Easy', 'addBinary', '3, 5', '', ''))
        entries.append(('68', 'Text Justification', 'Hard', 'textJustification', '5', '', '0'))
        entries.append(('69', 'Sqrt(x)', 'Easy', 'sqrtx', '2, 6', '0', '2'))
        entries.append(('70', 'Climbing Stairs', 'Easy', 'climbingStairs', '9', '', ''))
        entries.append(('71', 'Simplify Path', 'Medium', 'simplifyPath', '5, 15', '', ''))
        entries.append(('72', 'Edit Distance', 'Hard', 'editDistance', '5, 9', '0', ''))
        entries.append(('73', 'Set Matrix Zeroes', 'Medium', 'setMatrixZeroes', '0', '', ''))
        entries.append(('74', 'Search a 2D Matrix', 'Medium', 'searcha2DMatrix', '5, 6', '', ''))
        entries.append(('75', 'Sort Colors', 'Medium', 'sortColors', '0, 4, 13', '0', ''))
        entries.append(('76', 'Minimum Window Substring', 'Hard', 'minimumWindowSubstring', '1, 4, 5', '0', ''))
        entries.append(('77', 'Combinations', 'Medium', 'combinations', '8', '', ''))
        entries.append(('78', 'Subsets', 'Medium', 'subsets', '0, 8, 22', '', ''))
        entries.append(('79', 'Word Search', 'Medium', 'wordSearch', '0, 8', '0', '2'))
        entries.append(('80', 'Remove Duplicates from Sorted Array II', 'Medium', 'removeDuplicatesfromSortedArrayII', '0, 4', '', ''))
        entries.append(('81', 'Search in Rotated Sorted Array II', 'Medium', 'searchinRotatedSortedArrayII', '0, 6', '', ''))
        entries.append(('82', 'Remove Duplicates from Sorted List II', 'Medium', 'removeDuplicatesfromSortedListII', '2', '', ''))
        entries.append(('83', 'Remove Duplicates from Sorted List', 'Easy', 'removeDuplicatesfromSortedList', '2', '', ''))
        entries.append(('84', 'Largest Rectangle in Histogram', 'Hard', 'largestRectangleinHistogram', '0, 15', '', '0'))
        entries.append(('85', 'Maximal Rectangle', 'Hard', 'maximalRectangle', '0, 1, 9, 15', '', '0'))
        entries.append(('86', 'Partition List', 'Medium', 'partitionList', '2, 4', '', ''))
        entries.append(('87', 'Scramble String', 'Hard', 'scrambleString', '5, 9', '', '0'))
        entries.append(('88', 'Merge Sorted Array', 'Easy', 'mergeSortedArray', '0, 4', '', ''))
        entries.append(('89', 'Gray Code', 'Medium', 'grayCode', '8', '', '0'))
        entries.append(('90', 'Subsets II', 'Medium', 'subsetsII', '0, 8', '', ''))
        entries.append(('91', 'Decode Ways', 'Medium', 'decodeWays', '5, 9', '0', '2'))
        entries.append(('92', 'Reverse Linked List II', 'Medium', 'reverseLinkedListII', '2', '', ''))
        entries.append(('93', 'Restore IP Addresses', 'Medium', 'restoreIPAddresses', '5, 8', '', ''))
        entries.append(('94', 'Binary Tree Inorder Traversal', 'Medium', 'binaryTreeInorderTraversal', '1, 12, 15', '', ''))
        entries.append(('95', 'Unique Binary Search Trees II', 'Medium', 'uniqueBinarySearchTreesII', '9, 12', '', '0'))
        entries.append(('96', 'Unique Binary Search Trees', 'Medium', 'uniqueBinarySearchTrees', '9, 12', '', ''))
        entries.append(('97', 'Interleaving String', 'Hard', 'interleavingString', '5, 9', '', ''))
        entries.append(('98', 'Validate Binary Search Tree', 'Medium', 'validateBinarySearchTree', '12, 14', '0', '2'))
        entries.append(('99', 'Recover Binary Search Tree', 'Hard', 'recoverBinarySearchTree', '12, 14', '', ''))
        entries.append(('100', 'Same Tree', 'Easy', 'sameTree', '12, 14', '', ''))
        entries.append(('101', 'Symmetric Tree', 'Easy', 'symmetricTree', '12, 14, 19', '', ''))
        entries.append(('102', 'Binary Tree Level Order Traversal', 'Medium', 'binaryTreeLevelOrderTraversal', '12, 19', '', '2'))
        entries.append(('103', 'Binary Tree Zigzag Level Order Traversal', 'Medium', 'binaryTreeZigzagLevelOrderTraversal', '12, 15, 19', '', ''))
        entries.append(('104', 'Maximum Depth of Binary Tree', 'Easy', 'maximumDepthofBinaryTree', '12, 15', '', ''))
        entries.append(('105', 'Construct Binary Tree from Preorder and Inorder Traversal', 'Medium', 'constructBinaryTreefromPreorderandInorderTraversal', '0, 12, 14', '', ''))
        entries.append(('106', 'Construct Binary Tree from Inorder and Postorder Traversal', 'Medium', 'constructBinaryTreefromInorderandPostorderTraversal', '0, 12, 14', '', ''))
        entries.append(('107', 'Binary Tree Level Order Traversal II', 'Easy', 'binaryTreeLevelOrderTraversalII', '12, 19', '', ''))
        entries.append(('108', 'Convert Sorted Array to Binary Search Tree', 'Easy', 'convertSortedArraytoBinarySearchTree', '12, 14', '', ''))
        entries.append(('109', 'Convert Sorted List to Binary Search Tree', 'Medium', 'convertSortedListtoBinarySearchTree', '2, 14', '', ''))
        entries.append(('110', 'Balanced Binary Tree', 'Easy', 'balancedBinaryTree', '2, 14', '', ''))
        entries.append(('111', 'Minimum Depth of Binary Tree', 'Easy', 'minimumDepthofBinaryTree', '2, 14, 19', '', ''))
        entries.append(('112', 'Path Sum', 'Easy', 'pathSum', '2, 14', '', ''))
        entries.append(('113', 'Path Sum II', 'Medium', 'pathSumII', '2, 14', '', ''))
        entries.append(('114', 'Flatten Binary Tree to Linked List', 'Medium', 'flattenBinaryTreetoLinkedList', '12, 14', '0', '0'))
        entries.append(('115', 'Distinct Subsequences', 'Hard', 'distinctSubsequences', '5, 9', '', '0'))
        entries.append(('116', 'Populating Next Right Pointers in Each Node', 'Medium', 'populatingNextRightPointersinEachNode', '12, 14', '0', '2'))
        entries.append(('117', 'Populating Next Right Pointers in Each Node II', 'Medium', 'populatingNextRightPointersinEachNodeII', '12, 14', '0', '2'))
        entries.append(('118', 'Pascal''s Triangle', 'Easy', 'pascalsTriangle', '0', '', ''))
        entries.append(('119', 'Pascal''s Triangle II', 'Easy', 'pascalsTriangleII', '0', '', ''))
        entries.append(('120', 'Triangle', 'Medium', 'Triangle', '0, 9', '', ''))
        entries.append(('121', 'Best Time to Buy and Sell Stock', 'Easy', 'bestTimetoBuyandSellStock', '0, 9', '0', '2'))
        entries.append(('122', 'Best Time to Buy and Sell Stock II', 'Easy', 'bestTimetoBuyandSellStockII', '0, 18', '0', ''))
        entries.append(('123', 'Best Time to Buy and Sell Stock III', 'Hard', 'bestTimetoBuyandSellStockIII', '0, 9', '', ''))
        entries.append(('124', 'Binary Tree Maximum Path Sum', 'Hard', 'binaryTreeMaximumPathSum', '12, 14', '', '0'))
        entries.append(('125', 'Valid Palindrome', 'Easy', 'validPalindrome', '4, 5', '0', '2'))
        entries.append(('126', 'Word Ladder II', 'Hard', 'wordLadderII', '0, 5, 14, 19', '0', '0, 2'))
        entries.append(('127', 'Word Ladder', 'Medium', 'wordLadder', '0, 5, 14, 19', '0', ''))
        entries.append(('128', 'Longest Consecutive Sequence', 'Hard', 'longestConsecutiveSequence', '0, 16', '0', ''))
        entries.append(('129', 'Sum Root to Leaf Numbers', 'Medium', 'sumRoottoLeafNumbers', '12, 14', '', ''))
        entries.append(('130', 'Surrounded Regions', 'Medium', 'surroundedRegions', '16, 19', '', ''))
        entries.append(('131', 'Palindrome Partitioning', 'Medium', 'palindromePartitioning', '8', '', '2'))
        entries.append(('132', 'Palindrome Partitioning II', 'Hard', 'palindromePartitioningII', '9', '', '0'))
        entries.append(('133', 'Clone Graph', 'Medium', 'cloneGraph', '14, 19, 23', '0', '2'))
        entries.append(('134', 'Gas Station', 'Medium', 'gasStation', '17', '', '0'))
        entries.append(('135', 'Candy', 'Hard', 'candy', '17', '', '0'))
        entries.append(('136', 'Single Number', 'Easy', 'singleNumber', '1, 22', '0', '2'))
        entries.append(('137', 'Single Number II', 'Medium', 'singleNumberII', '22', '', ''))
        entries.append(('138', 'Copy List with Random Pointer', 'Medium', 'copyListwithRandomPointer', '1, 2', '0', '0'))
        entries.append(('139', 'Word Break', 'Medium', 'wordBreak', '9', '0', '0'))
        entries.append(('140', 'Word Break II', 'Hard', 'wordBreakII', '8, 9', '0', '0'))
        entries.append(('141', 'Linked List Cycle', 'Easy', 'linkedListCycle', '2, 4', '', ''))
        entries.append(('142', 'Linked List Cycle II', 'Medium', 'linkedListCycleII', '2, 4', '', ''))
        entries.append(('143', 'Reorder List', 'Medium', 'reorderList', '2', '', ''))
        entries.append(('144', 'Binary Tree Preorder Traversal', 'Medium', 'binaryTreePreorderTraversal', '12, 15', '', ''))
        entries.append(('145', 'Binary Tree Postorder Traversal', 'Hard', 'binaryTreePostorderTraversal', '12, 15', '', ''))
        entries.append(('146', 'LRU Cache', 'Hard', 'LRUCache', '10', '', '0'))
        entries.append(('147', 'Insertion Sort List', 'Medium', 'insertionSortList', '2, 13', '', ''))
        entries.append(('148', 'Sort List', 'Medium', 'sortList', '2, 13', '', ''))
        entries.append(('149', 'Max Points on a Line', 'Hard', 'maxPointsonaLine', '1, 3', '', '0'))
        entries.append(('150', 'Evaluate Reverse Polish Notation', 'Medium', 'evaluateReversePolishNotation', '15', '', ''))
        entries.append(('151', 'Reverse Words in a String', 'Medium', 'reverseWordsinaString', '5', '', ''))
        entries.append(('152', 'Maximum Product Subarray', 'Medium', 'maximumProductSubarray', '0, 9', '0', ''))
        entries.append(('153', 'Find Minimum in Rotated Sorted Array', 'Medium', 'findMinimuminRotatedSortedArray', '0, 11', '', ''))
        entries.append(('154', 'Find Minimum in Rotated Sorted Array II', 'Hard', 'findMinimuminRotatedSortedArrayII', '0, 11', '', ''))
        entries.append(('155', 'Min Stack', 'Easy', 'minStack', '10, 15', '', ''))
        entries.append(('157', 'Read N Characters Given Read4', 'Easy', 'readNCharactersGivenRead4', '0', '0', ''))
        entries.append(('158', 'Read N Characters Given Read4 II', 'Hard', 'readNCharactersGivenRead4II', '0', '0', ''))
        entries.append(('160', 'Intersection of Two Linked Lists', 'Easy', 'intersectionofTwoLinkedLists', '2', '', ''))
        entries.append(('162', 'Find Peak Element', 'Medium', 'findPeakElement', '0, 6', '', ''))
        entries.append(('164', 'Maximum Gap', 'Hard', 'maximumGap', '13', '', '0'))
        entries.append(('165', 'Compare Version Numbers', 'Medium', 'compareVersionNumbers', '5', '', ''))
        entries.append(('166', 'Fraction to Recurring Decimal', 'Medium', 'fractiontoRecurringDecimal', '1, 3', '', ''))
        entries.append(('167', 'Two Sum II - Input array is sorted', 'Easy', 'twoSumIIInputarrayissorted', '0, 4, 6', '', ''))
        entries.append(('168', 'Excel Sheet Column Title', 'Easy', 'excelSheetColumnTitle', '3', '', ''))
        entries.append(('169', 'Majority Element', 'Easy', 'majorityElement', '0, 7, 22', '', ''))
        entries.append(('171', 'Excel Sheet Column Number', 'Easy', 'excelSheetColumnNumber', '3', '', ''))
        entries.append(('172', 'Factorial Trailing Zeroes', 'Easy', 'factorialTrailingZeroes', '3', '', ''))
        entries.append(('173', 'Binary Search Tree Iterator', 'Medium', 'binarySearchTreeIterator', '10, 12, 15', '', ''))
        entries.append(('174', 'Dungeon Game', 'Hard', 'dungeonGame', '11, 14', '', ''))
        entries.append(('179', 'Largest Number', 'Medium', 'largestNumber', '13', '0', ''))
        entries.append(('187', 'Repeated DNA Sequences', 'Medium', 'repeatedDNASequences', '1, 22', '0', ''))
        entries.append(('188', 'Best Time to Buy and Sell Stock IV', 'Hard', 'bestTimetoBuyandSellStockIV', '9', '0', '0, 2'))
        entries.append(('189', 'Rotate Array', 'Easy', 'rotateArray', '0', '0', '2'))
        entries.append(('190', 'Reverse Bits', 'Easy', 'reverseBits', '22', '0', ''))
        entries.append(('191', 'Number of 1 Bits', 'Easy', 'numberof1Bits', '22', '0', ''))
        entries.append(('198', 'House Robber', 'Easy', 'houseRobber', '9', '0', ''))
        entries.append(('199', 'Binary Tree Right Side View', 'Medium', 'binaryTreeRightSideView', '12, 14, 19', '0', ''))
        entries.append(('200', 'Number of Islands', 'Medium', 'numberofIslands', '14, 16, 19', '0', '2'))
        entries.append(('201', 'Bitwise AND of Numbers Range', 'Medium', 'bitwiseANDofNumbersRange', '22', '', ''))
        entries.append(('202', 'Happy Number', 'Easy', 'happyNumber', '1, 3', '', ''))
        entries.append(('203', 'Remove Linked List Elements', 'Easy', 'removeLinkedListElements', '2', '', ''))
        entries.append(('204', 'Count Primes', 'Easy', 'countPrimes', '1, 3', '', ''))
        entries.append(('205', 'Isomorphic Strings', 'Easy', 'isomorphicStrings', '1', '', ''))
        entries.append(('206', 'Reverse Linked List', 'Easy', 'reverseLinkedList', '2', '', ''))
        entries.append(('207', 'Course Schedule', 'Medium', 'courseSchedule', '14, 19, 23, 24', '', ''))
        entries.append(('208', 'Implement Trie (Prefix Tree)', 'Medium', 'implementTrie', '10, 11', '0', ''))
        entries.append(('209', 'Minimum Size Subarray Sum', 'Medium', 'minimumSizeSubarraySum', '0, 4, 6', '', ''))
        entries.append(('210', 'Course Schedule II', 'Medium', 'courseScheduleII', '14, 19, 23, 24', '', ''))
        entries.append(('211', 'Add and Search Word - Data structure design', 'Medium', 'addandSearchWordDesign', '8, 11, 12', '0', '2'))
        entries.append(('212', 'Word Search II', 'Hard', 'wordSearchII', '8, 11', '0', '0, 2'))
        entries.append(('213', 'House Robber II', 'Medium', 'houseRobberII', '9', '', ''))
        entries.append(('214', 'Shortest Palindrome', 'Hard', 'shortestPalindrome', '5', '', ''))
        entries.append(('215', 'Kth Largest Element in an Array', 'Medium', 'kthLargestElementinanArray', '7, 20', '', ''))
        entries.append(('216', 'Combination Sum III', 'Medium', 'combinationSumIII', '0, 8', '', ''))
        entries.append(('217', 'Contains Duplicate', 'Medium', 'containsDuplicate', '0, 1', '', ''))
        entries.append(('218', 'The Skyline Problem', 'Hard', 'theSkylineProblem', '7, 20, 26, 27', '', '0'))
        entries.append(('219', 'Contains Duplicate II', 'Easy', 'containsDuplicateII', '0, 1', '', ''))
        entries.append(('220', 'Contains Duplicate III', 'Medium', 'containsDuplicateIII', '28', '', ''))
        entries.append(('221', 'Maximal Square', 'Medium', 'maximalSquare', '9', '', ''))
        entries.append(('222', 'Count Complete Tree Nodes', 'Medium', 'countCompleteTreeNodes', '6, 12', '', '0'))
        entries.append(('223', 'Rectangle Area', 'Medium', 'rectangleArea', '3', '', ''))
        entries.append(('224', 'Basic Calculator', 'Hard', 'basicCalculator', '3, 15', '', ''))
        entries.append(('225', 'Implement Stack using Queues', 'Easy', 'implementStackusingQueues', '10, 15', '', ''))
        entries.append(('226', 'Invert Binary Tree', 'Easy', 'invertBinaryTree', '12', '', ''))
        entries.append(('227', 'Basic Calculator II', 'Medium', 'basicCalculatorII', '5', '', ''))
        entries.append(('228', 'Summary Ranges', 'Medium', 'summaryRanges', '0', '', ''))
        entries.append(('229', 'Majority Element II', 'Medium', 'majorityElementII', '0', '', ''))
        entries.append(('230', 'Kth Smallest Element in a BST', 'Medium', 'kthSmallestElementinaBST', '6, 12', '', ''))
        entries.append(('231', 'Power of Two', 'Easy', 'powerofTwo', '3, 22', '', ''))
        entries.append(('232', 'Implement Queue using Stacks', 'Easy', 'implementQueueusingStacks', '10, 15', '', ''))
        entries.append(('233', 'Number of Digit One', 'Hard', 'numberofDigitOne', '3', '', ''))
        entries.append(('234', 'Palindrome Linked List', 'Easy', 'palindromeLinkedList', '2, 4', '', ''))
        entries.append(('235', 'Lowest Common Ancestor of a Binary Search Tree', 'Easy', 'lowestCommonAncestorofaBinarySearchTree', '12', '', '2'))
        entries.append(('236', 'Lowest Common Ancestor of a Binary Tree', 'Medium', 'lowestCommonAncestorofaBinaryTree', '12', '', '2'))
        entries.append(('237', 'Delete Node in a Linked List', 'Easy', 'deleteNodeinaLinkedList', '2', '', ''))
        entries.append(('238', 'Product of Array Except Self', 'Medium', 'productofArrayExceptSelf', '0', '', ''))
        entries.append(('239', 'Sliding Window Maximum', 'Hard', 'slidingWindowMaximum', '20', '0', '0, 2'))
        entries.append(('240', 'Search a 2D Matrix II', 'Medium', 'searcha2DMatrixII', '6, 7', '', ''))
        entries.append(('241', 'Different Ways to Add Parentheses', 'Medium', 'differentWaystoAddParentheses', '7', '', ''))
        entries.append(('242', 'Valid Anagram', 'Easy', 'validAnagram', '1, 13', '', ''))
        entries.append(('246', 'Strobogrammatic Number', 'Easy', 'strobogrammaticNumber', '1', '0', ''))
        entries.append(('247', 'Strobogrammatic Number II', 'Medium', 'strobogrammaticNumberII', '5', '0', ''))
        entries.append(('248', 'Strobogrammatic Number III', 'Hard', 'strobogrammaticNumberIII', '5', '0', ''))
        entries.append(('252', 'Meeting Rooms', 'Easy', 'meetingRooms', '13', '', ''))
        entries.append(('253', 'Meeting Rooms II', 'Medium', 'meetingRoomsII', '5', '0', '2'))
        entries.append(('257', 'Binary Tree Paths', 'Easy', 'binaryTreePaths', '12, 14', '', ''))
        entries.append(('258', 'Add Digits', 'Easy', 'addDigits', '3', '0', ''))
        entries.append(('260', 'Single Number III', 'Medium', 'singleNumberIII', '22', '', ''))
        entries.append(('263', 'Ugly Number', 'Easy', 'uglyNumber', '3', '', ''))
        entries.append(('264', 'Ugly Number II', 'Medium', 'uglyNumberII', '3', '', ''))
        entries.append(('268', 'Missing Number', 'Easy', 'missingNumber', '0, 3, 22', '', ''))
        entries.append(('273', 'Integer to English Words', 'Hard', 'integertoEnglishWords', '3, 5', '0', ''))
        entries.append(('274', 'H-Index', 'Medium', 'hIndex', '1, 13', '', ''))
        entries.append(('275', 'H-Index II', 'Medium', 'hIndexII', '6', '', ''))
        entries.append(('278', 'First Bad Version', 'Easy', 'firstBadVersion', '6', '', ''))
        entries.append(('279', 'Perfect Squares', 'Medium', 'perfectSquares', '3, 9, 19', '', ''))
        entries.append(('280', 'Wiggle Sort', 'Medium', 'wiggleSort', '0', '', ''))
        entries.append(('282', 'Expression Add Operators', 'Hard', 'expressionAddOperators', '7', '', '0'))
        entries.append(('283', 'Move Zeroes', 'Easy', 'moveZeroes', '0, 4', '0', '2'))
        entries.append(('284', 'Peeking Iterator', 'Medium', 'peekingIterator', '10', '', ''))
        entries.append(('285', 'Inorder Successor in BST', 'Medium', 'inorderSuccessorinBST', '12', '0', ''))
        entries.append(('287', 'Find the Duplicate Number', 'Medium', 'findtheDuplicateNumber', '0, 4, 6', '', ''))
        entries.append(('289', 'Game of Life', 'Medium', 'gameofLife', '0', '', ''))
        entries.append(('290', 'Word Pattern', 'Easy', 'wordPattern', '1', '', ''))
        entries.append(('292', 'Nim Game', 'Easy', 'nimGame', '3', '', ''))
        entries.append(('295', 'Find Median from Data Stream', 'Hard', 'findMedianfromDataStream', '10, 20', '', ''))
        entries.append(('297', 'Serialize and Deserialize Binary Tree', 'Hard', 'serializeandDeserializeBinaryTree', '10, 12', '', '0, 2'))
        entries.append(('299', 'Bulls and Cows', 'Medium', 'bullsandCows', '1', '', ''))
        entries.append(('300', 'Longest Increasing Subsequence', 'Medium', 'longestIncreasingSubsequence', '6, 9', '', '0'))
        entries.append(('301', 'Remove Invalid Parentheses', 'Hard', 'removeInvalidParentheses', '6, 9', '0', '0, 2'))
        entries.append(('303', 'Range Sum Query - Immutable', 'Easy', 'rangeSumQueryImmutable', '9', '', ''))
        entries.append(('304', 'Range Sum Query 2D - Immutable', 'Medium', 'rangeSumQuery2DImmutable', '9', '', '2'))
        entries.append(('306', 'Additive Number', 'Medium', 'additiveNumber', '3', '', '0'))
        entries.append(('307', 'Range Sum Query - Mutable', 'Medium', 'rangeSumQueryMutable', '26, 17', '', ''))
        entries.append(('309', 'Best Time to Buy and Sell Stock with Cooldown', 'Medium', 'bestTimetoBuyandSellStockwithCooldown', '9', '', ''))
        entries.append(('310', 'Minimum Height Trees', 'Medium', 'minimumHeightTrees', '19, 23', '', ''))
        entries.append(('311', 'Sparse Matrix Multiplication', 'Medium', 'sparseMatrixMultiplication', '21', '0', ''))
        entries.append(('312', 'Burst Balloons', 'Hard', 'burstBalloons', '7, 9', '', ''))
        entries.append(('313', 'Super Ugly Number', 'Medium', 'superUglyNumber', '3, 20', '', ''))
        entries.append(('315', 'Count of Smaller Numbers After Self', 'Hard', 'countofSmallerNumbersAfterSelf', '7, 26, 27, 28', '', ''))
        entries.append(('316', 'Remove Duplicate Letters', 'Hard', 'removeDuplicateLetters', '15, 17', '', ''))
        entries.append(('318', 'Maximum Product of Word Lengths', 'Medium', 'maximumProductofWordLengths', '22', '', ''))
        entries.append(('319', 'Bulb Switcher', 'Medium', 'bulbSwitcher', '3', '', ''))
        entries.append(('321', 'Create Maximum Number', 'Hard', 'createMaximumNumber', '9, 17', '', ''))
        entries.append(('322', 'Coin Change', 'Medium', 'coinChange', '9', '', ''))
        entries.append(('324', 'Wiggle Sort II', 'Medium', 'wiggleSortII', '13', '', ''))
        entries.append(('325', 'Maximum Size Subarray Sum Equals k', 'Medium', 'maximumSizeSubarraySumEqualsk', '1', '0', '2'))
        entries.append(('326', 'Power of Three', 'Easy', 'powerofThree', '3', '', ''))
        entries.append(('327', 'Count of Range Sum', 'Hard', 'countofRangeSum', '7, 28', '', ''))
        entries.append(('328', 'Odd Even Linked List', 'Medium', 'oddEvenLinkedList', '2', '', ''))
        entries.append(('329', 'Longest Increasing Path in a Matrix', 'Hard', 'longestIncreasingPathinaMatrix', '14, 24, 30', '', ''))
        entries.append(('330', 'Patching Array', 'Hard', 'patchingArray', '17', '', ''))
        entries.append(('331', 'Verify Preorder Serialization of a Binary Tree', 'Medium', 'verifyPreorderSerializationofaBinaryTree', '15', '', ''))
        entries.append(('332', 'Reconstruct Itinerary', 'Medium', 'reconstructItinerary', '14, 23', '', ''))
        entries.append(('334', 'Increasing Triplet Subsequence', 'Medium', 'increasingTripletSubsequence', '', '', ''))
        entries.append(('335', 'Self Crossing', 'Hard', 'selfCrossing', '3', '', ''))
        entries.append(('336', 'Palindrome Pairs', 'Hard', 'palindromePairs', '1, 5, 11', '', ''))
        entries.append(('337', 'House Robber III', 'Medium', 'houseRobberIII', '12, 14', '', ''))
        entries.append(('338', 'Counting Bits', 'Medium', 'countingBits', '9, 22', '', ''))
        entries.append(('341', 'Flatten Nested List Iterator', 'Medium', 'flattenNestedListIterator', '10, 15', '', ''))
        entries.append(('342', 'Power of Four', 'Easy', 'powerofFour', '22', '', ''))
        entries.append(('343', 'Integer Break', 'Medium', 'integerBreak', '3, 9', '', ''))
        entries.append(('344', 'Reverse String', 'Easy', 'reverseString', '4, 5', '', ''))
        entries.append(('345', 'Reverse Vowels of a String', 'Easy', 'reverseVowelsofaString', '4, 5', '', ''))
        entries.append(('345', 'Reverse Vowels of a String', 'Easy', 'reverseVowelsofaString', '4, 5', '', ''))
        entries.append(('347', 'Top K Frequent Elements', 'Medium', 'topKFrequentElements', '1, 20', '0', ''))
        entries.append(('349', 'Intersection of Two Arrays', 'Easy', 'intersectionofTwoArrays', '1, 4, 6, 13', '', ''))
        entries.append(('350', 'Intersection of Two Arrays II', 'Easy', 'intersectionofTwoArraysII', '1, 4, 6, 13', '', ''))
        entries.append(('352', 'Data Stream as Disjoint Intervals', 'Hard', 'dataStreamasDisjointIntervals', '29', '', ''))
        entries.append(('354', 'Russian Doll Envelopes', 'Hard', 'russianDollEnvelopes', '6, 9', '', ''))
        entries.append(('355', 'Design Twitter', 'Medium', 'designTwitter', '1, 10, 20', '', ''))
        entries.append(('357', 'Count Numbers with Unique Digits', 'Medium', 'countNumberswithUniqueDigits', '3, 8, 9', '', ''))
        entries.append(('363', 'Max Sum of Rectangle No Larger Than K', 'Hard', 'maxSumofRectangleNoLargerThanK', '6, 9, 25', '0', ''))
        entries.append(('365', 'Water and Jug Problem', 'Medium', 'waterandJugProblem', '3', '', ''))
        entries.append(('367', 'Valid Perfect Square', 'Easy', 'validPerfectSquare', '3, 6', '', ''))
        entries.append(('368', 'Largest Divisible Subset', 'Medium', 'largestDivisibleSubset', '3, 9', '', ''))
        entries.append(('371', 'Sum of Two Integerst', 'Easy', 'sumofTwoIntegers', '22', '', ''))
        entries.append(('372', 'Super Pow', 'Medium', 'superPow', '3', '', ''))
        entries.append(('373', 'Find K Pairs with Smallest Sums', 'Medium', 'findKPairswithSmallestSums', '20', '', ''))
        entries.append(('374', 'Guess Number Higher or Lower', 'Easy', 'guessNumberHigherorLower', '6', '', ''))
        entries.append(('375', 'Guess Number Higher or Lower II', 'Medium', 'guessNumberHigherorLowerII', '9, 31', '', ''))
        entries.append(('376', 'Wiggle Subsequence', 'Medium', 'wiggleSubsequence', '9, 17', '', ''))
        entries.append(('377', 'Combination Sum IV', 'Medium', 'combinationSumIV', '9', '', ''))
        entries.append(('378', 'Kth Smallest Element in a Sorted Matrix', 'Medium', 'kthSmallestElementinaSortedMatrix', '6, 20', '', ''))
        entries.append(('380', 'Insert Delete GetRandom O(1)', 'Medium', 'insertDeleteGetRandomO1', '0, 1, 10', '', ''))
        entries.append(('381', 'Insert Delete GetRandom O(1) - Duplicates allowed', 'Medium', 'insertDeleteGetRandomO1Duplicatesallowed', '0, 1, 10', '', ''))
        entries.append(('382', 'Linked List Random Node', 'Medium', 'linkedListRandomNode', '33', '', ''))
        entries.append(('383', 'Ransom Note', 'Easy', 'ransomNote', '5', '', ''))
        entries.append(('384', 'Shuffle an Array', 'Medium', 'shuffleanArray', '0, 33', '', ''))
        entries.append(('385', 'Mini Parser', 'Medium', 'miniParser', '5, 15', '', ''))
        entries.append(('386', 'Lexicographical Numbers', 'Medium', 'lexicographicalNumbers', '13', '', ''))
        entries.append(('387', 'First Unique Character in a String', 'Easy', 'firstUniqueCharacterinaString', '5', '', ''))
        entries.append(('388', 'Longest Absolute File Path', 'Medium', 'longestAbsoluteFilePath', '5', '', ''))
        entries.append(('389', 'Find the Difference', 'Easy', 'findtheDifference', '1, 22', '', ''))
        entries.append(('390', 'Elimination Game', 'Medium', 'eliminationGame', '3', '', ''))
        entries.append(('391', 'Perfect Rectangle', 'Hard', 'perfectRectangle', '0', '', ''))
        entries.append(('392', 'Is Subsequence', 'Medium', 'isSubsequence', '6, 9, 17', '', ''))
        entries.append(('393', 'UTF-8 Validation', 'Medium', 'UTF8Validation', '22', '', ''))
        entries.append(('394', 'Decode String', 'Medium', 'decodeString', '14, 15', '', ''))
        entries.append(('395', 'Longest Substring with At Least K Repeating Characters', 'Medium', 'longestSubstringwithAtLeastKRepeatingCharacters', '5', '', ''))
        entries.append(('396', 'Rotate Function', 'Medium', 'rotateFunction', '3', '', ''))
        entries.append(('397', 'Integer Replacement', 'Medium', 'integerReplacement', '3, 22', '', ''))
        entries.append(('398', 'Random Pick Index', 'Medium', 'randomPickIndex', '33', '', ''))
        entries.append(('399', 'Evaluate Division', 'Medium', 'evaluateDivision', '23', '', ''))
        entries.append(('400', 'Nth Digit', 'Easy', 'nthDigit', '3', '', ''))
        entries.append(('401', 'Binary Watch', 'Easy', 'binaryWatch', '8, 22', '', ''))
        entries.append(('402', 'Remove K Digits', 'Medium', 'removeKDigits', '15, 17', '', ''))
        entries.append(('403', 'Frog Jump', 'Hard', 'frogJump', '9', '', ''))
        entries.append(('404', 'Sum of Left Leaves', 'Easy', 'sumofLeftLeaves', '12', '', ''))
        entries.append(('405', 'Convert a Number to Hexadecimal', 'Easy', 'convertaNumbertoHexadecimal', '22', '', ''))
        entries.append(('406', 'Queue Reconstruction by Height', 'Medium', 'queueReconstructionbyHeight', '17', '', ''))
        entries.append(('407', 'Trapping Rain Water II', 'Hard', 'trappingRainWaterII', '19, 20', '', ''))
        entries.append(('409', 'Longest Palindrome', 'Easy', 'longestPalindrome', '1', '', ''))
        entries.append(('410', 'Split Array Largest Sum', 'Hard', 'splitArrayLargestSum', '6, 9', '', ''))
        entries.append(('412', 'Fizz Buzz', 'Easy', 'fizzBuzz', '3', '', ''))
        entries.append(('413', 'Arithmetic Slices', 'Medium', 'arithmeticSlices', '3, 9', '', ''))
        entries.append(('414', 'Third Maximum Number', 'Easy', 'thirdMaximumNumber', '0', '', ''))
        entries.append(('415', 'Add Strings', 'Easy', 'addStrings', '3', '', ''))
        entries.append(('416', 'Partition Equal Subset Sum', 'Medium', 'partitionEqualSubsetSum', '9', '', ''))
        entries.append(('417', 'Pacific Atlantic Water Flow', 'Medium', 'pacificAtlanticWaterFlow', '14, 19', '', ''))
        entries.append(('419', 'Battleships in a Board', 'Medium', 'battleshipsinaBoard', '0', '', ''))
        entries.append(('420', 'Strong Password Checker', 'Hard', 'strongPasswordChecker', '5', '', ''))
        entries.append(('421', 'Maximum XOR of Two Numbers in an Array', 'Medium', 'maximumXORofTwoNumbersinanArray', '11, 22', '', ''))
        entries.append(('423', 'Reconstruct Original Digits from English', 'Medium', 'reconstructOriginalDigitsfromEnglish', '3', '', ''))
        entries.append(('424', 'Longest Repeating Character Replacement', 'Medium', 'longestRepeatingCharacterReplacement', '4, 5', '', ''))
        entries.append(('432', 'All O`one Data Structure', 'Hard', 'allOoneDataStructure', '10', '', ''))
        entries.append(('433', 'Minimum Genetic Mutation', 'Medium', 'minimumGeneticMutation', '19', '', '0'))
        entries.append(('434', 'Number of Segments in a String', 'Easy', 'numberofSegmentsinaString', '5', '', ''))
        entries.append(('435', 'Non-overlapping Intervals', 'Medium', 'nonoverlappingIntervals', '17', '', ''))
        entries.append(('436', 'Find Right Interval', 'Medium', 'findRightInterval', '6', '', ''))
        entries.append(('437', 'Path Sum III', 'Easy', 'pathSumIII', '12', '', ''))
        entries.append(('438', 'Find All Anagrams in a String', 'Easy', 'findAllAnagramsinaString', '1', '', ''))
        entries.append(('440', 'K-th Smallest in Lexicographical Order', 'Hard', 'kthSmallestinLexicographicalOrder', '3', '', ''))
        entries.append(('441', 'Arranging Coins', 'Easy', 'arrangingCoins', '4, 6', '', ''))
        entries.append(('442', 'Find All Duplicates in an Array', 'Medium', 'findAllDuplicatesinanArray', '0', '', ''))
        entries.append(('445', 'Add Two Numbers II', 'Medium', 'addTwoNumbersII', '2', '', ''))
        entries.append(('446', 'Arithmetic Slices II - Subsequence', 'Hard', 'arithmeticSlicesIISubsequence', '9', '', ''))
        entries.append(('447', 'Number of Boomerangs', 'Easy', 'numberofBoomerangs', '1', '', ''))
        entries.append(('448', 'Find All Numbers Disappeared in an Array', 'Easy', 'findAllNumbersDisappearedinanArray', '0', '', ''))
        entries.append(('449', 'Serialize and Deserialize BST', 'Medium', 'serializeandDeserializeBST', '12', '', ''))
        entries.append(('450', 'Delete Node in a BST', 'Medium', 'deleteNodeinaBST', '12', '', ''))
        entries.append(('451', 'Sort Characters By Frequency', 'Medium', 'sortCharactersByFrequency', '1, 20', '', ''))
        entries.append(('452', 'Minimum Number of Arrows to Burst Balloons', 'Medium', 'minimumNumberofArrowstoBurstBalloons', '17', '', ''))
        entries.append(('453', 'Minimum Moves to Equal Array Elements', 'Easy', 'minimumMovestoEqualArrayElements', '3', '', ''))
        entries.append(('454', '4Sum II', 'Medium', '4SumII', '1, 6', '', ''))
        entries.append(('455', 'Assign Cookies', 'Easy', 'assignCookies', '17', '', ''))
        entries.append(('456', '132 Pattern', 'Medium', '132Pattern', '15', '', ''))
        entries.append(('459', 'Repeated Substring Pattern', 'Easy', 'repeatedSubstringPattern', '5', '', ''))
        entries.append(('460', 'LFU Cache', 'Hard', 'LFUCache', '10', '', ''))
        entries.append(('461', 'Hamming Distance', 'Easy', 'hammingDistance', '22', '', ''))
        entries.append(('462', 'Minimum Moves to Equal Array Elements II', 'Medium', 'minimumMovestoEqualArrayElementsII', '3', '', ''))
        entries.append(('463', 'Island Perimeter', 'Easy', 'islandPerimeter', '1', '', ''))
        entries.append(('464', 'Can I Win', 'Medium', 'canIWin', '9, 33', '', ''))
        entries.append(('466', 'Count The Repetitions', 'Hard', 'countTheRepetitions', '9', '', ''))
        entries.append(('467', 'Unique Substrings in Wraparound String', 'Hard', 'uniqueSubstringsinWraparoundString', '9', '', ''))
        entries.append(('468', 'Validate IP Address', 'Medium', 'validateIPAddress', '5', '', ''))
        entries.append(('472', 'Concatenated Words', 'Hard', 'concatenatedWords', '9, 11, 14', '', ''))
        entries.append(('473', 'Matchsticks to Square', 'Medium', 'matchstickstoSquare', '14', '', ''))
        entries.append(('474', 'Ones and Zeroes', 'Medium', 'onesandZeroes', '9', '', ''))
        entries.append(('475', 'Heaters', 'Easy', 'heaters', '6', '', ''))
        entries.append(('476', 'Number Complement', 'Easy', 'numberComplement', '22', '', ''))
        entries.append(('477', 'Total Hamming Distance', 'Medium', 'totalHammingDistance', '22', '', ''))
        entries.append(('479', 'Largest Palindrome Product', 'Easy', 'largestPalindromeProduct', '3', '', ''))
        entries.append(('480', 'Sliding Window Median', 'Hard', 'slidingWindowMedian', '20', '', ''))
        entries.append(('481', 'Magical String', 'Medium', 'magicalString', '5', '', ''))
        entries.append(('485', 'Max Consecutive Ones', 'Easy', 'maxConsecutiveOnes', '0', '0', ''))
        entries.append(('500', 'Keyboard Row', 'Easy', 'keyboardRow', '1', '0', ''))
        entries.append(('523', 'Continuous Subarray Sum', 'Medium', 'continuousSubarraySum', '3, 9', '0', ''))
        entries.append(('543', 'Diameter of Binary Tree', 'Easy', 'diameterofBinaryTree', '12', '0', ''))
        entries.append(('551', 'Student Attendance Record I', 'Easy', 'studentAttendanceRecordI', '5', '', ''))
        entries.append(('552', 'Student Attendance Record II', 'Hard', 'studentAttendanceRecordII', '9', '', ''))
        entries.append(('557', 'Reverse Words in a String III', 'Easy', 'reverseWordsinaStringIII', '5', '', ''))
        entries.append(('575', 'Distribute Candies', 'Easy', 'distributeCandies', '1', '', ''))
        entries.append(('581', 'Shortest Unsorted Continuous Subarray', 'Easy', 'shortestUnsortedContinuousSubarray', '0', '', ''))
        entries.append(('588', 'Design In-Memory File System', 'Hard', 'designInMemoryFileSystem', '10', '', ''))
        entries.append(('592', 'Fraction Addition and Subtraction', 'Medium', 'fractionAdditionandSubtraction', '3', '', ''))
        entries.append(('593', 'Valid Square', 'Medium', 'validSquare', '3', '', ''))
        entries.append(('594', 'Longest Harmonious Subsequence', 'Easy', 'longestHarmoniousSubsequence', '1', '', ''))
        entries.append(('598', 'Range Addition II', 'Easy', 'rangeAdditionII', '3', '', ''))
        entries.append(('599', 'Minimum Index Sum of Two Lists', 'Easy', 'minimumIndexSumofTwoLists', '1', '', ''))
        entries.append(('605', 'Can Place Flowers', 'Easy', 'canPlaceFlowers', '0', '', ''))
        entries.append(('606', 'Construct String from Binary Tree', 'Easy', 'constructStringfromBinaryTree', '5, 12', '', ''))
        entries.append(('609', 'Find Duplicate File in System', 'Medium', 'findDuplicateFileinSystem', '1, 5', '', ''))
        entries.append(('611', 'Valid Triangle Number', 'Medium', 'validTriangleNumber', '0', '', ''))
        entries.append(('617', 'Merge Two Binary Trees', 'Easy', 'mergeTwoBinaryTrees', '12', '', ''))
        entries.append(('621', 'Task Scheduler', 'Medium', 'taskScheduler', '0, 17, 18', '0', ''))
        entries.append(('623', 'Add One Row to Tree', 'Medium', 'addOneRowtoTree', '12', '', ''))
        entries.append(('624', 'Maximum Distance in Arrays', 'Easy', 'maximumDistanceinArrays', '0, 1', '', ''))
        entries.append(('625', 'Minimum Factorization', 'Medium', 'minimumFactorization', '3, 32', '', ''))
        entries.append(('628', 'Maximum Product of Three Numbers', 'Easy', 'maximumProductofThreeNumbers', '0, 3', '', ''))
        entries.append(('629', 'K Inverse Pairs Array', 'Medium', 'kInversePairsArray', '9', '', ''))
        entries.append(('630', 'Course Schedule III', 'Medium', 'courseScheduleIII', '17', '', ''))

        # Facebook interview questions
        entries.append(('10001', 'Remove Duplicate Characters', 'Easy', 'removeDuplicateCharacters', '1', '0', ''))
        entries.append(('10002', 'Find Kth Nearest Point', 'Medium', 'findKthNearestPoint', '13', '0', '0'))
        entries.append(('10004', 'Even Tree', 'Medium', 'evenTree', '12', '0', ''))
        entries.append(('10005', 'Most Continuous Appearances', 'Medium', 'mostContinuousAppearances', '9', '0', ''))
        entries.append(('10006', 'Count Number Occurrence', 'Hard', 'countNumberOccurrence', '0, 6', '0', ''))
        entries.append(('10007', 'Replace With Space', 'Easy', 'replaceWithSpace', '4', '0', ''))
        entries.append(('10008', 'BST LCA with Deepest Leaf', 'Medium', 'bSTLCAwithDeepestLeaf', '12', '0', '0'))
        entries.append(('10009', 'Multiple Leaf Tree LCA with Deepest Leaf', 'Medium', 'multipleLeafTreeLCAwithDeepestLeaf', '12', '0', ''))
        entries.append(('10010', 'Valley or Peak Element', 'Easy', 'valleyorPeakElement', '0, 3', '0', ''))
        entries.append(('10011', 'Row With Most Ones', 'Medium', 'rowWithMostOnes', '21', '0', ''))
        entries.append(('10012', 'Find the Point Where Maximum Intervals Overlap', 'Medium', 'findthePointWhereMaximumIntervalsOverlap', '0, 13', '0', ''))
        entries.append(('10013', 'Convert a Binary Tree to a Circular Doubly Link List', 'Hard', 'convertaBinaryTreetoaCircularDoublyLinkList', '2', '0', '0'))
        entries.append(('10014', 'Largest subarray with equal number of 0s and 1s', 'Medium', 'largestSubarrayWithEqualNumberof0sAnd1s', '1', '0', '2'))
        entries.append(('10015', 'Knight Path', 'Hard', 'knightPath', '19', '0', '2'))
        entries.append(('10016', 'Task Schedule I', 'Easy', 'taskScheduleI', '1', '0', '2'))


        # Code Snippets to remember
        entries.append(('11001', 'Binary Search', 'Easy', 'binarySearch', '1', '', '1'))
        entries.append(('11002', 'Quick Select', 'Medium', 'quickSelect', '7', '', '1'))
        entries.append(('11003', 'Reverse LinkedList', 'Medium', 'reverseLinkedList', '2', '', '1'))
        entries.append(('11004', 'KMP', 'Hard', 'KMP', '5', '', '1'))
        entries.append(('11005', 'Combination Sum II', 'Medium', 'combinationSumII', '0, 8', '', '1'))
        entries.append(('11006', 'Minimum Window Substring', 'Hard', 'minimumWindowSubstring', '1, 4, 5', '', '1'))
        entries.append(('11007', 'Tree Inorder Traversal', 'Medium', 'treeInorderTraversal', '1, 12, 15', '', '1'))
        entries.append(('11008', 'Tree Preorder Traversal', 'Medium', 'treePreorderTraversal', '1, 12, 15', '', '1'))
        entries.append(('11009', 'Tree Postorder Traversal', 'Hard', 'treePostorderTraversal', '1, 12, 15', '', '1'))
        entries.append(('11010', 'Bit Manipulation', 'Medium', 'bitManipulation', '22', '', '1'))
        entries.append(('11011', 'Implement Trie', 'Medium', 'implementTrie', '10, 11', '', '1'))
        entries.append(('11012', 'Shortest Path', 'Medium', 'shortestPath', '19', '', '1'))
        entries.append(('11013', 'Bidirectional Search', 'Medium', 'bidirectionalSearch', '19', '', '1'))


        easyProblemEntries = []
        mediumProblemEntries = []
        hardProblemEntries = []
        facebookProblemEntries = []
        codeSnippetEntries = []

        for entry in entries:
            difficulty = entry[2]
            problemNum = entry[0]
            if 10000 < int(problemNum) <= 11000:
                facebookProblemEntries.append(entry)
            elif 11000 < int(problemNum) <= 12000:
                codeSnippetEntries.append(entry)
            elif difficulty == 'Easy':
                easyProblemEntries.append(entry)
            elif difficulty == 'Medium':
                mediumProblemEntries.append(entry)
            elif difficulty == 'Hard':
                hardProblemEntries.append(entry)

        # save problems to database
        conn = sqlite3.connect('leetcode_problems.db')
        conn.text_factory = str
        print("Opened database successfully")

        index = 0
        self.saveToDB(descriptionsDir + 'Easy/', easyProblemEntries, solutionsDir + 'Easy/', conn, index)
        index = len(easyProblemEntries)
        self.saveToDB(descriptionsDir + 'Medium/', mediumProblemEntries, solutionsDir + 'Medium/', conn, index)
        index += len(mediumProblemEntries)
        self.saveToDB(descriptionsDir + 'Hard/', hardProblemEntries, solutionsDir + 'Hard/', conn, index)
        index += len(hardProblemEntries)
        self.saveToDB(descriptionsDir + 'Facebook/', facebookProblemEntries, solutionsDir + 'Facebook/', conn, index)
        index += len(facebookProblemEntries)
        self.saveToDB(descriptionsDir + 'CodeSnippets/', codeSnippetEntries, solutionsDir + 'CodeSnippets/', conn, index)

        conn.commit()
        print("Records created successfully")
        conn.close()

    def saveToDB(self, descriptionsDir, entries, solutionsDir, conn, index):
        for entry in entries:
            solutionNum = entry[0]
            solutionTitle = entry[1]
            solutionDifficulty = entry[2]
            fileName = entry[3]
            tags = entry[4]
            companies = entry[5]
            specialtags = entry[6]

            solutionFile = solutionsDir + fileName + '.java'
            descriptionFile = descriptionsDir + fileName + '.html'

            solution = open(solutionFile, encoding="utf8").read()
            description = open(descriptionFile, encoding="utf8").read()

            formatter = HtmlFormatter()
            formatter.noclasses = True
            formatter.linenos = True
            formatter.nobackground = True
            highlightedCode = highlight(solution, JavaLexer(), formatter)

            formattedCode = '<!DOCTYPE html>'
            formattedCode += '<html>'
            formattedCode += '<body>'
            formattedCode += highlightedCode
            formattedCode += '</body>'
            formattedCode += '</html>'

            conn.execute(
                "INSERT INTO Problems (ID, Number, Title, Difficulty, Description, Solution, Tags, Companies, SpecialTags) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                (index, solutionNum, solutionTitle, solutionDifficulty, description, formattedCode, tags, companies, specialtags));
            index += 1


if __name__ == '__main__':
    JavaProcessor().processEasyProblems('./solutions/', './descriptions/')
